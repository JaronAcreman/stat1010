---
title: "Use Git and GitHub"
author: "Yi Wang"
format: 
  html:
    number-sections: true
editor: visual
---

I assume you already have an account on <https://github.com>. If not, you need to create an account there.

## Download Git

1.  Go to the website <https://git-scm.com/downloads>, select an appropriate operating system, select "Click here to download"

2.  Run the downloaded setup file with a name such as `Git-2.42.0.2-64-bit.exe`, and accept all default options.

## Establish a connection between a local repo and a remote GitHub repo

### Clone an existing GitHub account

This is an easier way to establish a connection between a local repo and a remote repo if the remote repo is created ahead.

1.  Sign in to your GitHub account, and create a GitHub repo (such as named `homework0`) on `GitHub` (<https://github.com>), you can add a README.md file or just choose not to add a README.md file.

2.  On your local computer, open a `Git Bash` terminal. In the terminal, type `mkdir homework0` (create a folder named `homework0` within the current directory and then `cd homework0` (enter the directory `homework0`). The directory name `homework0` can be any name you want.

3.  `git clone https://github.com/YourGitHubUserName/homework0.git` (change the remote repo to your remote repo)

4.  Now you have established a connection between your local directory `homework0` and the remote repo `homework0` on GitHub.

5.  Create a new file in the current local directory `homework0` on your local computer, such as using your favorite editor to create a file named `myfirstlocalfile.txt` with any content in it. Or for the sake of demonstration, you can use the following Linux command to create this file containing the line `#My first local file`.

    `echo "#My first local file" >> myfirstlocalfile.txt`

6.  In the terminal, `git add .` This will add all changes to the **staging area**.

7.  Now you are ready to **commit** the changes, which versions the current files in the directory.

    `git commit -m "my first commit from local"`

8.  Now you are ready to sync with the remote repo.

    `git push`

    The GitHub might ask you to sign in for the first time. Choose `Sign in with your brower` to sign in to complete it.

### Initializing a Git Directory Locally First

The previous approach initializes a local Git repo by cloning a remote repo. You can also initializing a local Git repo by using `git init`. Follow the following steps:

3.  Sign in to your GitHub account.

4.  Create a GitHub **empty** repo (such as named `homework0`) on `GitHub` (<https://github.com>) but make sure it is empty (do not add Readme.md file)

5.  Start a Git Bash Terminal window on your local computer (You could also use the Terminal Window in RStudio or VSC). Navigate to the project directory; if you haven't yet created a project directory such as `homework0`, do

    `mkdir project_dir` Example: `mkdir homework0`

    Use `cd project_directory_name` to enter your local project directory;

    Use `ls` to list all files and directories or use `ls -al` to include all hidden files and directories. In your local Git Terminal, (note at this moment your local project directory is empty)

    ```         
    echo "# homework0" >> README.md  #create a file README.md
    git init
    git branch -M main #rename the branch name to main
    git add .  # maybe be changed to git add --all
    git commit -m "first commit"
    git remote add origin https://github.com/ywanglab/homework0.git #(change the remote to your remote repo)
    git push -u origin main 
    ```

    Note:

    1)  the general command format: `git push [remote-name] [branch-name]`

    2)  difference between `git add .` and `git add --all`: `git add .`: stages changes in the current directory and its subdirectories but does not include file deletions `git add --all`: stages changes in the entire working tree, including deletions and untracked files. It is a more aggressive option and can be useful when you want to ensure that every change, including file deletions, is included in the next commit.

        `git add –all` is equivalent to `git add -A`

6.  if your local project directory already 1) contains files and 2) had performed `init git` before, then

    ```         
    git remote add origin https://github.com/ywanglab/homework0.git` #(change the remote to your remote repo)
    git branch -M main
    git push -u origin main
    ```

7.  in the pop-out `GitHub Sign-in` window, click on `Sign in with your browser`.

8.  Note an empty folder would not be pushed to the remote repo until it has a file (even empty) in it.

## Some other common commands

6.  check git status: `git status` and `git status --short` for a compact way.

7.  `git commit -a -m "message"` will stage and commit every changed, already tracked file without using `git add changed_file`

8.  `git add filename` or `git add .`

    \# add changes to the staging environment, i.e., git repo to start track those changes.

9.  use `git log` to check all commits. Use `git log --pretty=oneline` for shorter display.

    `git log origin/main` #check the remote repo `origin/main` commits

10. use `git diff origin/main` to show the differences between our local `main` and `origin/main`.

11. use `git checkout .` to revert back to the previous commit. Any changes after the previous commit will be abandoned.

12. to get to a previous commit, use `git checkout six_character_commit_ID`. To get back to main, use `git checkout main`.

13. To permanently go back to a previous commit, use

    `git reset –hard six_char_commit_ID`

14. `git remote -v` Get the reminder of the remote repo

15. if you want to remove the file only from the remote GitHub repository and not remove it from your local filesystem, use:

```         
git rm -rf --cached file1.txt #This will only remote files; If intending to remove local files too, remove --cached
git commit -m "remove file1.txt" 
```

And to push changes to remote repo

```         
git push origin main 
```

14. For some operating system, such as Mac or Linux, you might be asked to tell GitHub who you are. When you are prompted, type the following two commands in your terminal window:

```         
git config --global user.name "Your Name" 
git config --global user.mail "your@email.com"
```

This will change the Git configuration in a way that anytime you use Git, it will know this information. Note that **you need to use the email account that you used to open your GitHub account**. `global` sets the username and em-mail for **every repo** on your computer. If you want to set the username/e-mail just for the current repo, remove `global`.

## Use Git help

1.  `git command -help` See all the available options for the specific command. Use \``--help` instead of `-help` to open the relevant Git manual page.
2.  `git help --all` See all possible commands

## When the upstream repo changes

When Git tells you the upstream repo is ahead,

15. Do `git pull` or `git pull origin`

    This is equivalent to `git fetch origin`, and then `git merge origin/main.`Then you can commit and push a new version to the remote repo.

16. `git pull` will not pull a new branches on the remote repo to local, but it will inform you if there is a new branch on the remote repo. In this case, just `git checkout the_remote_new_branch_name` will be pulled to local. Note there is **no need** to create the branch by `git branch the_remote_new_branch_name`

## Create branch

16. To add a branch to the main branch `git branch branchname`

    Switch the branch `git checkout branchname`

    To combine the above two actions, `git checkout -b branchname`, create a new branch named `branchname` if it does not exist and move to it.

Adding a file in branch `echo "#content" >> filename.txt`

Then `add` the file and commit the file. To create the branch remotely we **have to use**

`git push --set-upstream origin branchname` The option `--set-upstream` can be replaced by `-u`

to see all branches in both local and remote: `git branch -a` Or `git branch -r` for remote only.

## Merge branch to main branch

Switch from a branch (with name such as `branchname` to the `main` using\
`git checkout main`

on the `main` branch, Merge command to merge the branches\
`git merge branchname`

To delete a branch:

`git branch -d branchname`

## Contribute directly by cloning the author's github repo

16. `git clone remote-repo` to a local directory
17. create a new branch: `git branch [your_branch_name]`
18. `git checkout [your_branch_name]`
19. Submitting your changes for review
    1.  **Commit your changes locally.** Once you are ready to submit your changes, run these commands in your terminal:

        ```         
        git add -A                            # Stages all changes, short for --all 
        git status                            # Lists all staged changes 
        git commit -m '[your commit message]' # Makes a git commit
        ```

        **Make a pull request.** (A pull request is a proposal to change) A GitHub pull request allows a collaborator to review and make comments on your changes you proposed. Once approved, the collaborator can merge the changes. Run:

        ```         
        git push origin HEAD # Push current branch to the same branch on GitHub
        ```

        Now, open the remote GitHub repo that you cloned such as: https://github.com/ywanglab/stat1010 in your browser. You should see a **green** button titled "Compare & pull request". Click that button. Fill out the form on the resulting page with a title and description for your changes. Finally, click the "Create pull request" button.

## Contribute by fork a GitHub repo and commit the fork repo and create a pull request

20. after forking a GitHub repo to your own GitHub account, `git clone` that account to your local repo.
21. make changes to a file, and `git add, commit and git push origin HEAD` the changes to the remote repo in your account.
22. Then go to your remote repo on the GitHub site and **Create pull request**.

## Project

1.  Please git clone the course directory

`git clone https://github.com/ywanglab/stat1010.git`

to your local computer

2.  create a new branch called: `YourFirstName_branch` by

`git branch YourFirstName_branch`

3.  enter this branch:

`git checkout YourFirstName_branch`

4.  add your resume file in the folder `./resume`

`git add`, `commit` and `push` your changes to the upstream repo using

```         
git add .

git commit -m "added YourFirstName's resume"

git push origin HEAD
```

5.  Now, open the remote GitHub repo that you cloned such as:<https://github.com/ywanglab/stat1010>in your browser. You should see a **green** button titled "Compare & pull request". Click that button. Fill out the form on the resulting page with a title and description for your changes. Finally, click the "Create pull request" button.
